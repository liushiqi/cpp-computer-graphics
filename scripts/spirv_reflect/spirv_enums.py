from enum import Enum


class SpvReflectResult(Enum):
    SPV_REFLECT_RESULT_SUCCESS = 0
    SPV_REFLECT_RESULT_NOT_READY = 1
    SPV_REFLECT_RESULT_ERROR_PARSE_FAILED = 2
    SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED = 3
    SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED = 4
    SPV_REFLECT_RESULT_ERROR_NULL_POINTER = 5
    SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR = 6
    SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH = 7
    SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND = 8
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE = 9
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER = 10
    SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF = 11
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE = 12
    SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW = 13
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS = 14
    SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION = 15
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_INSTRUCTION = 16
    SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_BLOCK_DATA = 17
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_BLOCK_MEMBER_REFERENCE = 18
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ENTRY_POINT = 19
    SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_EXECUTION_MODE = 20


class SpvReflectShaderStageFlagBits(Enum):
    SPV_REFLECT_SHADER_STAGE_VERTEX_BIT = 0x00000001
    SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002
    SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004
    SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT = 0x00000008
    SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT = 0x00000010
    SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT = 0x00000020
    SPV_REFLECT_SHADER_STAGE_TASK_BIT_NV = 0x00000040
    SPV_REFLECT_SHADER_STAGE_MESH_BIT_NV = 0x00000080
    SPV_REFLECT_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100
    SPV_REFLECT_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200
    SPV_REFLECT_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400
    SPV_REFLECT_SHADER_STAGE_MISS_BIT_KHR = 0x00000800
    SPV_REFLECT_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000
    SPV_REFLECT_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000


SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_VERTEX_BIT.cpp_name = "liu::shader_type::VERTEX"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT.cpp_name = "liu::shader_type::TESSELLATION_CONTROL"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT.cpp_name = "liu::shader_type::TESSELLATION_EVALUATION"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT.cpp_name = "liu::shader_type::GEOMETRY"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT.cpp_name = "liu::shader_type::FRAGMENT"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT.cpp_name = "liu::shader_type::COMPUTE"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_TASK_BIT_NV.cpp_name = "liu::shader_type::TASK"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_MESH_BIT_NV.cpp_name = "liu::shader_type::MESH"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_RAYGEN_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_RAYGEN"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_ANY_HIT_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_ANY_HIT"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_CLOSEST_HIT_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_CLOSEST_HIT"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_MISS_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_MISS"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_INTERSECTION_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_INTERSECTION"
SpvReflectShaderStageFlagBits.SPV_REFLECT_SHADER_STAGE_CALLABLE_BIT_KHR.cpp_name = "liu::shader_type::VK_RAY_CALLABLE"


class SpvReflectFormat(Enum):
    SPV_REFLECT_FORMAT_UNDEFINED = 0
    SPV_REFLECT_FORMAT_R32_UINT = 98
    SPV_REFLECT_FORMAT_R32_SINT = 99
    SPV_REFLECT_FORMAT_R32_SFLOAT = 100
    SPV_REFLECT_FORMAT_R32G32_UINT = 101
    SPV_REFLECT_FORMAT_R32G32_SINT = 102
    SPV_REFLECT_FORMAT_R32G32_SFLOAT = 103
    SPV_REFLECT_FORMAT_R32G32B32_UINT = 104
    SPV_REFLECT_FORMAT_R32G32B32_SINT = 105
    SPV_REFLECT_FORMAT_R32G32B32_SFLOAT = 106
    SPV_REFLECT_FORMAT_R32G32B32A32_UINT = 107
    SPV_REFLECT_FORMAT_R32G32B32A32_SINT = 108
    SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT = 109
    SPV_REFLECT_FORMAT_R64_UINT = 110
    SPV_REFLECT_FORMAT_R64_SINT = 111
    SPV_REFLECT_FORMAT_R64_SFLOAT = 112
    SPV_REFLECT_FORMAT_R64G64_UINT = 113
    SPV_REFLECT_FORMAT_R64G64_SINT = 114
    SPV_REFLECT_FORMAT_R64G64_SFLOAT = 115
    SPV_REFLECT_FORMAT_R64G64B64_UINT = 116
    SPV_REFLECT_FORMAT_R64G64B64_SINT = 117
    SPV_REFLECT_FORMAT_R64G64B64_SFLOAT = 118
    SPV_REFLECT_FORMAT_R64G64B64A64_UINT = 119
    SPV_REFLECT_FORMAT_R64G64B64A64_SINT = 120
    SPV_REFLECT_FORMAT_R64G64B64A64_SFLOAT = 121


SpvReflectFormat.SPV_REFLECT_FORMAT_R32_UINT.c_type = 'std::uint32_t'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32_SINT.c_type = 'std::int32_t'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32_SFLOAT.c_type = 'float'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_UINT.c_type = 'glm::u32vec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_SINT.c_type = 'glm::i32vec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_SFLOAT.c_type = 'glm::vec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_UINT.c_type = 'glm::u32vec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_SINT.c_type = 'glm::i32vec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_SFLOAT.c_type = 'glm::vec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_UINT.c_type = 'glm::u32vec4'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_SINT.c_type = 'glm::i32vec4'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT.c_type = 'glm::vec4'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_UINT.c_type = 'std::uint64_t'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_SINT.c_type = 'std::int64_t'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_SFLOAT.c_type = 'double'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_UINT.c_type = 'glm::u64vec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_SINT.c_type = 'glm::i64vec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_SFLOAT.c_type = 'glm::dvec2'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_UINT.c_type = 'glm::i64vec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_SINT.c_type = 'glm::u64vec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_SFLOAT.c_type = 'glm::dvec3'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_UINT.c_type = 'glm::u64vec4'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_SINT.c_type = 'glm::i64vec4'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_SFLOAT.c_type = 'glm::dvec4'

SpvReflectFormat.SPV_REFLECT_FORMAT_R32_UINT.cpp_name = 'liu::input_format::UINT_X32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32_SINT.cpp_name = 'liu::input_format::SINT_X32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_UINT.cpp_name = 'liu::input_format::UINT_X32Y32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_SINT.cpp_name = 'liu::input_format::SINT_X32Y32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X32Y32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_UINT.cpp_name = 'liu::input_format::UINT_X32Y32Z32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_SINT.cpp_name = 'liu::input_format::SINT_X32Y32Z32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X32Y32Z32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_UINT.cpp_name = 'liu::input_format::UINT_X32Y32Z32W32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_SINT.cpp_name = 'liu::input_format::SINT_X32Y32Z32W32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X32Y32Z32W32'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_UINT.cpp_name = 'liu::input_format::UINT_X64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_SINT.cpp_name = 'liu::input_format::SINT_X64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_UINT.cpp_name = 'liu::input_format::UINT_X64Y64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_SINT.cpp_name = 'liu::input_format::SINT_X64Y64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X64Y64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_UINT.cpp_name = 'liu::input_format::UINT_X64Y64Z64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_SINT.cpp_name = 'liu::input_format::SINT_X64Y64Z64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X64Y64Z64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_UINT.cpp_name = 'liu::input_format::UINT_X64Y64Z64W64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_SINT.cpp_name = 'liu::input_format::SINT_X64Y64Z64W64'
SpvReflectFormat.SPV_REFLECT_FORMAT_R64G64B64A64_SFLOAT.cpp_name = 'liu::input_format::FLOAT_X64Y64Z64W64'


class SpvReflectDescriptorType(Enum):
    SAMPLER = 0
    COMBINED_IMAGE_SAMPLER = 1
    SAMPLED_IMAGE = 2
    STORAGE_IMAGE = 3
    UNIFORM_TEXEL_BUFFER = 4
    STORAGE_TEXEL_BUFFER = 5
    UNIFORM_BUFFER = 6
    STORAGE_BUFFER = 7
    UNIFORM_BUFFER_DYNAMIC = 8
    STORAGE_BUFFER_DYNAMIC = 9
    INPUT_ATTACHMENT = 10
    ACCELERATION_STRUCTURE_KHR = 1000150000
